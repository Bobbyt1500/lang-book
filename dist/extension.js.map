{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://language-book/./src/extension/languageDataProvider.ts","webpack://language-book/./src/extension/notebookCompletionProvider.ts","webpack://language-book/./src/extension/notebookProvider.ts","webpack://language-book/./src/extension/notebookSerializer.ts","webpack://language-book/external commonjs \"vscode\"","webpack://language-book/webpack/bootstrap","webpack://language-book/./src/extension/extension.ts"],"sourcesContent":["export interface LanguageBlock {\n    original: string,\n    pronunciation?: string,\n    definition?: string\n}\n\nexport class LanguageBookParser {\n    private static _parseBlockText(text: string): LanguageBlock {\n        /*\n            Returns a block containing the parsed properties\n        */\n        // TODO MAKE CLEANER\n\n        // Get locations of syntactical elements\n        var pronunciationLocation = text.indexOf(\"#\");\n        if (pronunciationLocation === -1) pronunciationLocation = text.indexOf(\"＃\");\n\n        var definitionLocation = text.indexOf(\":\");\n        if (definitionLocation === -1) definitionLocation = text.indexOf(\"：\");\n\n        // Throw error if definition is before pronunciation\n        if (definitionLocation !== -1 && definitionLocation < pronunciationLocation) throw new Error(\"Expected '#' before ':'\");\n\n        // Get block properties from syntax elements\n        if (pronunciationLocation === -1 && definitionLocation === -1) return {original: text};\n        if (definitionLocation === -1) {\n            return {\n                original: text.slice(0, pronunciationLocation),\n                pronunciation: text.slice(pronunciationLocation + 1)\n            }\n        }\n        if (pronunciationLocation === -1) {\n            return {\n                original: text.slice(0, definitionLocation),\n                definition: text.slice(definitionLocation + 1)\n            }\n        } else {\n            return {\n                original: text.slice(0, pronunciationLocation),\n                pronunciation: text.slice(pronunciationLocation + 1, definitionLocation),\n                definition: text.slice(definitionLocation + 1)\n            }\n        }\n        \n    }\n    private static _parenthesesHelper(text: string): [number, number] {\n        /*\n        Searches for and gets indexes for the start parentheses and end parentheses\n        Checks for errors and throws exceptions if there is a problem\n        */\n\n        var start = text.indexOf('(');\n        var end = text.indexOf(')');\n\n        if (start > end) throw new Error(\"Expected '('\");\n        if (end === -1 && start > -1) throw new Error(\"Expected ')'\");\n\n        // Check for parantheses inside and throw error\n        for (let i = start + 1; i < end+1; i++) {\n            if (text[i] === '(') throw new Error(\"Expected ')'\");\n        }\n\n        return [start, end];\n    }\n    static parse(text: string): LanguageBlock[] {\n        var ret: LanguageBlock[] = [];\n        let remaining = text;\n\n        while (true) {\n            // Get parentheses locations\n            let locations = this._parenthesesHelper(remaining);\n        \n\n            if (locations[0] === -1) {\n                // Add last parts to a block\n                ret.push({original: remaining.slice(0)});\n                break;\n            };\n\n            locations[0] !== 0 && ret.push({original: remaining.slice(0, locations[0])});\n            ret.push(this._parseBlockText(remaining.slice(locations[0] + 1, locations[1])));\n\n            // Get remaining parts to parse \n            remaining = remaining.substring(locations[1] + 1);\n\n            if (remaining.length === 0) break;\n        }\n\n        return ret;\n    }\n}","import * as vscode from \"vscode\";\n\nclass NotebookCompletionProvider implements vscode.CompletionItemProvider {\n\tprovideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext): vscode.ProviderResult<vscode.CompletionItem[] | vscode.CompletionList<vscode.CompletionItem>> {\n\t\tconst result: vscode.CompletionItem[] = [];\n\n\t\tresult.push({\n\t\t\tlabel: 'PRODEF',\n\t\t\tdetail: 'Word/Phrase Pronunciation and Definition',\n\t\t\tinsertText: new vscode.SnippetString('(${1:word/phrase}#${2:pronunciation}:${3:definition})'),\n\t\t\tkind: vscode.CompletionItemKind.Snippet\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default NotebookCompletionProvider;","import * as vscode from 'vscode';\nimport { LanguageBlock, LanguageBookParser } from './languageDataProvider';\n\nexport class LanguageBookKernel {\n\treadonly controllerId = 'language-book-controller-id';\n\treadonly notebookType = 'language-book';\n\treadonly label = 'Language Book';\n\treadonly supportedLanguages = ['langbook-syntax'];\n\n\tprivate readonly _controller: vscode.NotebookController;\n\tprivate _executionOrder = 0;\n\n\tconstructor() {\n\t\tthis._controller = vscode.notebooks.createNotebookController(\n\t\t\tthis.controllerId,\n\t\t\tthis.notebookType,\n\t\t\tthis.label\n\t\t);\n\n\t\tthis._controller.supportedLanguages = this.supportedLanguages;\n\t\tthis._controller.supportsExecutionOrder = true;\n\t\tthis._controller.executeHandler = this._execute.bind(this);\n\t}\n\n\tprivate _execute(\n\t\tcells: vscode.NotebookCell[],\n\t\t_notebook: vscode.NotebookDocument,\n\t\t_controller: vscode.NotebookController\n\t): void {\n\t\tfor (let cell of cells) {\n\t\t\tthis._doExecution(cell);\n\t\t}\n\t}\n\n\tprivate async _doExecution(cell: vscode.NotebookCell): Promise<void> {\n\t\tconst execution = this._controller.createNotebookCellExecution(cell);\n\t\texecution.executionOrder = ++this._executionOrder;\n\t\texecution.start(Date.now()); // Keep track of elapsed time to execute cell.\n\t\tlet data: LanguageBlock[][] = this._processCell(cell.document.getText());\n\t\ttry {\n\t\t\texecution.replaceOutput([\n\t\t\t\tnew vscode.NotebookCellOutput([\n\t\t\t\t\tvscode.NotebookCellOutputItem.json(data, \"x-application/language-book-data\")\n\t\t\t\t])\n\t\t\t]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t\t\n\t\texecution.end(true, Date.now());\n\t}\n\n\tprivate _processCell(text: string): LanguageBlock[][] {\n\t\tlet lines = text.split('\\n');\n\n\t\tlet blocks: LanguageBlock[][] = [];\n\t\tfor (let line of lines) {\n\t\t\tif (line.length === 0) continue;\n\t\t\tblocks.push(LanguageBookParser.parse(line));\n\t\t}\n\n\t\treturn blocks;\n\t\t\n\t}\n\n\tdispose() {};\n}","import * as vscode from \"vscode\";\n\ninterface RawNotebookCell {\n\tlanguage: string;\n\tvalue: string;\n\tkind: vscode.NotebookCellKind;\n}\n\nclass NotebookSerializer implements vscode.NotebookSerializer {\n\tasync deserializeNotebook(\n\t\tcontent: Uint8Array,\n\t\t_token: vscode.CancellationToken\n\t): Promise<vscode.NotebookData> {\n\t\tvar contents = new TextDecoder().decode(content);\n\n\t\tlet raw: RawNotebookCell[];\n\t\ttry {\n\t\t\traw = <RawNotebookCell[]>JSON.parse(contents);\n\t\t} catch {\n\t\t\traw = [];\n\t\t}\n\n\t\tconst cells = raw.map(\n\t\t\titem => new vscode.NotebookCellData(item.kind, item.value, item.language)\n\t\t);\n\n\t\treturn new vscode.NotebookData(cells);\n\t}\n\n\tasync serializeNotebook(\n\t\tdata: vscode.NotebookData,\n\t\t_token: vscode.CancellationToken\n\t): Promise<Uint8Array> {\n\t\tlet contents: RawNotebookCell[] = [];\n\n\t\tfor (const cell of data.cells) {\n\t\t\tcontents.push({\n\t\t\t\tkind: cell.kind,\n\t\t\t\tlanguage: cell.languageId,\n\t\t\t\tvalue: cell.value\n\t\t\t});\n\t\t}\n\n\t\treturn new TextEncoder().encode(JSON.stringify(contents));\n\t}\n}\n\nexport default NotebookSerializer;","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { LanguageBookKernel } from './notebookProvider';\nimport NotebookSerializer from './notebookSerializer';\nimport NotebookCompletionProvider from './notebookCompletionProvider';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Communicate with renderer\n\tlet messageChannel = vscode.notebooks.createRendererMessaging(\"language-book-renderer\");\n\tmessageChannel.onDidReceiveMessage((e) => {\n\n\t\t// Get answer and post response\n\t\tif (e.message.request = \"promptAnswer\") {\n\t\t\tvscode.window.showInputBox().then((response) => {\n\t\t\t\tmessageChannel.postMessage({\n\t\t\t\t\trequest: \"promptAnswer\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t\tblockIndex: e.message.blockIndex,\n\t\t\t\t\ttargetUuid: e.message.uuid\n\t\t\t\t}, e.editor);\n\t\t\t});\n\t\t}\n\t});\n\t\n\tcontext.subscriptions.push(\n\t\tvscode.workspace.registerNotebookSerializer('language-book', new NotebookSerializer())\n\t);\n\n\tcontext.subscriptions.push(new LanguageBookKernel());\n\n\tvscode.languages.registerCompletionItemProvider({ language: 'langbook-syntax' }, new NotebookCompletionProvider());\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["static","text","pronunciationLocation","indexOf","definitionLocation","Error","original","slice","pronunciation","definition","start","end","i","ret","remaining","locations","this","_parenthesesHelper","push","_parseBlockText","substring","length","provideCompletionItems","document","position","token","context","result","label","detail","insertText","vscode","SnippetString","kind","CompletionItemKind","Snippet","constructor","controllerId","notebookType","supportedLanguages","_executionOrder","_controller","notebooks","createNotebookController","supportsExecutionOrder","executeHandler","_execute","bind","cells","_notebook","cell","_doExecution","async","execution","createNotebookCellExecution","executionOrder","Date","now","data","_processCell","getText","replaceOutput","NotebookCellOutput","NotebookCellOutputItem","json","error","console","log","lines","split","blocks","line","LanguageBookParser","parse","dispose","content","_token","contents","TextDecoder","decode","raw","JSON","map","item","NotebookCellData","value","language","NotebookData","languageId","TextEncoder","encode","stringify","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","messageChannel","createRendererMessaging","onDidReceiveMessage","e","message","request","window","showInputBox","then","response","postMessage","blockIndex","targetUuid","uuid","editor","subscriptions","workspace","registerNotebookSerializer","LanguageBookKernel","languages","registerCompletionItemProvider"],"sourceRoot":""}